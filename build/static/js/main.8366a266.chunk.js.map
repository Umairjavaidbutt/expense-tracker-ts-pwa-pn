{"version":3,"sources":["components/Header.tsx","context/AppReducer.ts","context/GlobalState.tsx","components/Balance.tsx","components/IncomeExpenses.tsx","components/TransactionList.tsx","components/AddTransaction.tsx","firebase.js","App.tsx","index.tsx","swDev.ts"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","text","amount","deleteTransaction","addTransaction","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","Balance","total","useContext","map","reduce","acc","item","toFixed","IncomeExpenses","income","expense","className","TransactionList","key","Math","abs","onClick","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","Number","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","messaging","Notification","requestPermission","then","getToken","token","console","log","ReactDOM","render","StrictMode","document","getElementById","swDev","process","navigator","serviceWorker","register","result","catch","err"],"mappings":"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","file":"static/js/main.8366a266.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Header = () => {\r\n  return <h2>Expense Tracker</h2>;\r\n};\r\n","import { TransactionType, TransactionsArray } from \"../components/Types\";\r\n\r\ntype Action = {type: 'ADD_TRANSACTION', payload: TransactionType} | {type: 'DELETE_TRANSACTION', payload: number}\r\n\r\nexport default (state : TransactionsArray, action: Action) => {\r\n    switch (action.type) {\r\n      case \"DELETE_TRANSACTION\":\r\n        return {\r\n          ...state,\r\n          transactions: state.transactions.filter(\r\n            (transaction) => transaction.id !== action.payload\r\n          )\r\n        };\r\n      case \"ADD_TRANSACTION\":\r\n        return {\r\n          ...state,\r\n          transactions: [action.payload, ...state.transactions]\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  ","import React, { useReducer } from \"react\";\r\nimport { createContext } from \"react\";\r\nimport AppReducer from \"./AppReducer\";\r\nimport { TransactionType } from '../components/Types'\r\n\r\n\r\n\r\nconst initialState = {\r\n  transactions: [{\r\n    id: 1,\r\n    text: 'expense',\r\n    amount:100 \r\n  }],\r\n  deleteTransaction: (id:number) => {},\r\n  addTransaction: (transaction: TransactionType) => {}\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider : React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  function deleteTransaction(id:number) {\r\n    dispatch({\r\n      type: \"DELETE_TRANSACTION\",\r\n      payload: id\r\n    });\r\n  }\r\n\r\n  function addTransaction(transaction:TransactionType) {\r\n    dispatch({\r\n      type: \"ADD_TRANSACTION\",\r\n      payload: transaction\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state.transactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { TransactionType } from \"./Types\";\r\n\r\n\r\nexport const Balance = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amount = transactions.map((transaction: TransactionType) => transaction.amount);\r\n  const total = amount.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n  return (\r\n    <div>\r\n      <h4>Your Balance</h4>\r\n      <h1>${total}</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { TransactionType } from \"./Types\";\r\n\r\nexport const IncomeExpenses = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amount = transactions.map((transaction: TransactionType) => transaction.amount);\r\n\r\n  const income = amount\r\n    .filter((item) => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n  const expense = amount\r\n    .filter((item) => item < 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n      <div>\r\n        <h4>Income</h4>\r\n        <p className=\"money-plus\">+${income}</p>\r\n      </div>\r\n      <div>\r\n        <h4>Expense</h4>\r\n        <p className=\"money-minus\">-${expense}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { TransactionType } from \"./Types\";\r\n\r\nexport const TransactionList = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const { deleteTransaction } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <>\r\n      <h3>History</h3>\r\n      <ul className=\"list\">\r\n        {transactions.map((transaction: TransactionType) => {\r\n          return (\r\n            <li key={transaction.id} className={transaction.amount < 0 ? \"minus\" : \"plus\"}>\r\n              {transaction.text}{\" \"}\r\n              <span>\r\n                {transaction.amount < 0 ? \"-\" : \"+\"}$\r\n                {Math.abs(transaction.amount)}\r\n              </span>\r\n              <button\r\n                onClick={() => deleteTransaction(transaction.id)}\r\n                className=\"delete-btn\"\r\n              >\r\n                            x\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nexport const AddTransaction = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = (e: {preventDefault: () => void}) => {\r\n    e.preventDefault();\r\n\r\n    const newTransaction = {\r\n      id: Math.floor(Math.random() * 1000000),\r\n      text,\r\n      amount: +amount\r\n    };\r\n    addTransaction(newTransaction);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Add New Transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            placeholder=\"Enter Text...\"\r\n          />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\">\r\n            Amount <br />\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(Number(e.target.value))}\r\n            placeholder=\"Enter Amount...\"\r\n          />\r\n          <button className=\"btn\">Add Transaction</button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n","import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDp-gUitLJKTSx_3Qz0hOjTs8S1jePI4SE\",\r\n    authDomain: \"push-notifications-et.firebaseapp.com\",\r\n    databaseURL: \"https://push-notifications-et.firebaseio.com\",\r\n    projectId: \"push-notifications-et\",\r\n    storageBucket: \"push-notifications-et.appspot.com\",\r\n    messagingSenderId: \"535192270333\",\r\n    appId: \"1:535192270333:web:bd9d6cbc3ae4998d0c5594\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React from \"react\";\nimport { Header } from \"./components/Header\";\nimport { Balance } from \"./components/Balance\";\nimport { IncomeExpenses } from \"./components/IncomeExpenses\";\nimport { TransactionList } from \"./components/TransactionList\";\nimport { AddTransaction } from \"./components/AddTransaction\";\n\nimport { GlobalProvider } from \"./context/GlobalState\";\nimport './App.css';\nimport firebase from './firebase';\n\nexport default function App() {\n  const messaging = firebase.messaging();\n  Notification.requestPermission().then(() => {\n    return messaging.getToken()\n  }).then((token) => {\n    console.log('token:', token)\n  })\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport swDev from './swDev';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nswDev();\n","\r\nexport default function swDev() {\r\n    let swDev = `${process.env.PUBLIC_URL}/sw.js`\r\n    navigator.serviceWorker.register(swDev).then(result => {\r\n        console.log('result1:', result)\r\n    })\r\n    .catch(err => {\r\n        console.log('err:', err)\r\n    })\r\n}"],"sourceRoot":""}